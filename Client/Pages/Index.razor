@page "/"
@using BlazorApp.Shared
@using BlazorApp.Client.Models
@inject HttpClient Http

<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Child Timetable</MudText>
        <MudAppBarSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Default" Edge="Edge.End" Link="https://github.com/MrSimonC" />
    </MudAppBar>
    <MudMainContent>
        <MudPaper>
            <MudContainer MaxWidth="MaxWidth.Small"></MudContainer>
        </MudPaper>
        <MudText Class="pt-2 pl-3 pr-3" Typo="Typo.h6">Daily Child's Timetable Generator</MudText>
        <MudText Class="pa-3" Typo="Typo.subtitle1">Refresh the page to see a different potential day of actions - to help you entertain your little one. Good luck parent!</MudText>
        <MudGrid Spacing="0">
            @if (displayEntries == null)
            {
                <MudItem xs="12">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">Loading...</MudPaper>
                </MudItem>
            }
            else
            {
                @foreach (var entry in displayEntries)
                {
                    <MudItem xs="12">
                        <MudPaper Class="py-8 ma-2">
                            <MudGrid Spacing="0">
                                <MudItem xs="2">
                                    <MudPaper Elevation="0" Class="d-flex align-center justify-center px-2">@entry.Time</MudPaper>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudPaper Elevation="0" Class="d-flex align-center justify-center px-2"><MudIcon Icon="@entry.Icon" Color="@entry.Color" /></MudPaper>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudPaper Elevation="0" Class="d-flex align-center justify-center px-2">@entry.Name</MudPaper>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudPaper Elevation="0" Class="d-flex align-center justify-center px-2">@entry.Description</MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudMainContent>
</MudLayout>

@code {
    private List<TimetableItemDisplay>? displayEntries;

    protected override async Task OnInitializedAsync()
    {
        //#if DEBUG
        //        await Task.Delay(10000);
        //#endif

        try
        {
            var entries = await Http.GetFromJsonAsync<List<TimetableItem>>("/api/GetEntries");
            displayEntries = GenerateDayGrid(entries ?? throw new ArgumentNullException("entries null from api"));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private List<TimetableItemDisplay> GenerateDayGrid(List<TimetableItem> entries)
    {
        var results = new List<TimetableItemDisplay>();
        string lunch = "12pm";
        string dinner = "6pm";
        List<string> timeSlots = new List<string> { "9am", "10am", "11am", "12pm", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm" };

        @foreach (var time in timeSlots)
        {
            TimetableItemDisplay? displayEntry = new TimetableItemDisplay();
            if (time == lunch)
            {
                displayEntry = new TimetableItemDisplay
                {
                    Time = lunch,
                    Age = new List<int> { 2, 3, 4, 5 },
                    Icon = "fas fa-apple-alt",
                    Name = "Lunch Time",
                    Description = "Time to eat lunch",
                    Color = GetRandomColour()
                };
            }
            else if (time == dinner)
            {
                displayEntry = new TimetableItemDisplay
                {
                    Time = dinner,
                    Age = new List<int> { 2, 3, 4, 5 },
                    Icon = "fas fa-utensils",
                    Name = "Dinner Time",
                    Description = "Time to eat dinner",
                    Color = GetRandomColour()
                };
            }
            else
            {
                TimetableItem activity = GetRandomItemAndDecrement(entries);
                displayEntry.Name = activity.Name;
                displayEntry.Description = activity.Description;
                displayEntry.Icon = activity.Icon;
                displayEntry.Time = time;
                displayEntry.Color = GetRandomColour();
            }

            results.Add(displayEntry);
        }
        return results;
    }

    private TimetableItem GetRandomItemAndDecrement(List<TimetableItem> entries)
    {
        if (entries == null || !entries.Any())
        {
            return new TimetableItem();
        }

        Random rand = new Random();
        int toSkip = rand.Next(0, entries.Count);
        var result = entries.Skip(toSkip).Take(1).First();
        entries.Remove(result);

        return result;
    }

    private Color GetRandomColour()
    {
        Random rand = new Random();
        int num = rand.Next(1, 7);
        return (Color)num;
    }
}
